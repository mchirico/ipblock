package updateRules

// http://www.ipdeny.com/ipblocks/data/countries/all-zones.tar.gz
// http://www.ipdeny.com/ipblocks/data/countries/MD5SUM
// https://dev.maxmind.com/geoip/geoip2/geolite2/

import (
	"archive/tar"
	"compress/gzip"
	"crypto/md5"
	"encoding/json"
	"fmt"
	"github.com/mchirico/ipblock/request"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

func downloadFile(filepath string, url string) (err error) {

	// Create the file
	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	// Get the data
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Check server response
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("bad status: %s", resp.Status)
	}

	// Writer the body to file
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}

	return nil
}

func FileMD5(file string) string {
	f, err := os.Open(file)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	h := md5.New()
	if _, err := io.Copy(h, f); err != nil {
		log.Fatal(err)
	}

	return fmt.Sprintf("%x", h.Sum(nil))
}

func DownloadTest() (bool, error) {
	url := "http://www.ipdeny.com/ipblocks/data/countries/all-zones.tar.gz"
	urlMD5 := "http://www.ipdeny.com/ipblocks/data/countries/MD5SUM"
	file := "all-zones.tar.gz"

	downloadFile(file, url)

	r, err := request.Get(urlMD5)
	if err != nil {
		return false, err
	}

	if !strings.Contains(r, FileMD5(file)) {
		return false, err

	}

	return true, err
}

func CreateAutogen(file string, tag string) error {
	// Create the file
	f, err := os.Create(file)
	if err != nil {
		return err
	}
	defer f.Close()

	dat := fmt.Sprintf(`

// DO NOT EDIT: Autogenerated

package autogen

import (
       "encoding/json"
)

type MT struct {
	Cider string
	File  string
}


func ConvertJSON() (map[string]*MT, error) {

	var m map[string]*MT
	err := json.Unmarshal(IP , &m)
	if err != nil {
		return m, err
	}
	

	return m, err

}

var IP = []byte(%s)

`, tag)

	f.WriteString(dat)

	return err
}

func Unzip(src string) error {

	sourcefile := src

	if sourcefile == "" {
		fmt.Println("Usage : go-untar sourcefile.tar")
		os.Exit(1)
	}

	file, err := os.Open(sourcefile)

	if err != nil {
		fmt.Println(err)
		return err

	}

	defer file.Close()

	var fileReader io.ReadCloser = file

	// just in case we are reading a tar.gz file, add a filter to handle gzipped file
	if strings.HasSuffix(sourcefile, ".gz") {
		if fileReader, err = gzip.NewReader(file); err != nil {

			fmt.Println(err)
			return err

		}
		defer fileReader.Close()
	}

	tarBallReader := tar.NewReader(fileReader)

	// Extracting tarred files

	for {
		header, err := tarBallReader.Next()
		if err != nil {
			if err == io.EOF {
				break
			}
			fmt.Println(err)
			return err
		}

		// get the individual filename and extract to the current directory
		filename := header.Name

		switch header.Typeflag {
		case tar.TypeDir:
			// handle directory
			fmt.Println("Creating directory :", filename)
			err = os.MkdirAll(filename, os.FileMode(header.Mode)) // or use 0755 if you prefer

			if err != nil {
				fmt.Println(err)
				return err
			}

		case tar.TypeReg:
			// handle normal file
			fmt.Println("Untarring :", filename)
			writer, err := os.Create(filename)

			if err != nil {
				fmt.Println(err)
				return err
			}

			io.Copy(writer, tarBallReader)

			err = os.Chmod(filename, os.FileMode(header.Mode))

			if err != nil {
				fmt.Println(err)
				return err
			}

			writer.Close()
		default:
			fmt.Printf("Unable to untar type : %c in file %s", header.Typeflag, filename)
		}
	}
	return err
}

func ListFiles(pwd string) []string {
	var files []string

	err := filepath.Walk(pwd, func(path string, info os.FileInfo, err error) error {
		files = append(files, path)
		return nil
	})
	if err != nil {
		panic(err)
	}
	return files
}

func ListZones(dir string) []string {
	files := ListFiles("./junk")
	zoneFiles := []string{}
	for _, v := range files {
		if strings.Contains(v, ".zone") {
			zoneFiles = append(zoneFiles, v)
		}

	}
	return zoneFiles
}

func ReadFile(file string) string {
	dat, err := ioutil.ReadFile(file)
	if err != nil {
		panic(err)
	}
	return string(dat)
}

type MT struct {
	Cider string
	File  string
}

func FileToJson(file string, z *map[string]MT) ([]byte, error) {

	m := *z

	r := ReadFile(file)
	filename := strings.Split(file, "/")

	s := strings.Split(r, "\n")
	for _, v := range s {

		if !strings.Contains(v, "/") {
			continue
		}
		s := strings.Split(v, "/")
		m[s[0]] = MT{v, filename[len(filename)-1]}

	}
	mjson, err := json.Marshal(m)
	if err != nil {
		return nil, err
	}

	//json.Unmarshal(mjson, &m2)
	//fmt.Printf("%v\n",m2)
	return mjson, err
}
