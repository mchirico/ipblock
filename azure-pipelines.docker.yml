# 
# 
# 
# 

pool:
  vmImage: 'ubuntu-16.04' # examples of other options: 'macOS-10.13', 'vs2017-win2016'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  GOMAXPROCS: 9
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  dockerId: aipiggybot  
  imageName: ipblock  # Replace with the name of the image you want to publish


steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
    echo 'Variables:'
    echo ${MONGO_DATABASE}
  displayName: 'Set up the Go workspace'

- script: go get -v -t -d ./...
  workingDirectory: '$(modulePath)'
  displayName: 'go get dependencies'

- script: go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Build'



# ******************************************************************************************
#    Example Usage:  (Note, use -md md5, for consistency)
#
#  export SUPER_SECRET_PASSWORD="SomPassword"
#  openssl aes-256-cbc -k "${SUPER_SECRET_PASSWORD}" -md md5  -in rules.v4  -out rules.v4.enc
#  openssl aes-256-cbc -k "${SUPER_SECRET_PASSWORD}"  -md md5 -in test-fixtures/rules.v4.enc -out test-fixtures/rules.test.v4 -d
#
# ******************************************************************************************
#
- script: |
    openssl aes-256-cbc -k "${SUPER_SECRET_PASSWORD}" -md md5 -in test-fixtures/rules.v4.enc -out test-fixtures/rules.v4 -d
    tail -n4 test-fixtures/rules.v4
  workingDirectory: '$(modulePath)'
  env:
    SUPER_SECRET_PASSWORD: $(SUPER_SECRET_PASSWORD)  
  displayName: 'Decrypt'


- script: |
    set -e
    go test -race -coverprofile=coverage.txt -covermode=atomic ./...
    if [[ -s coverage.txt ]]; then bash <(curl -s https://codecov.io/bash); fi
  env:
    MONGO_DATABASE: $(MONGO_DATABASE)
    MONGO_CONNECTION_STRING: $(MONGO_CONNECTION_STRING)
    CODECOV_TOKEN: $(CODECOV_TOKEN)
  workingDirectory: '$(modulePath)'
  displayName: 'Run tests'


# Docker
- script: |
    set -e
    docker build --no-cache -t $(dockerId)/$(imageName) .
    echo "${DOCKERPASSWORD}"| docker login -u=$(dockerId) --password-stdin
    docker push $(dockerId)/$(imageName)
    docker logout
  env:
    DOCKERPASSWORD: $(dockerPassword)
  workingDirectory: '$(modulePath)'
  displayName: 'Building docker image and pushing'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

